/*
一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。

给你石子的位置列表 stones（用单元格序号 升序 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。

开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。

如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。

 

示例 1：

输入：stones = [0,1,3,5,6,8,12,17]
输出：true
解释：青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。
示例 2：

输入：stones = [0,1,2,3,4,8,9,11]
输出：false
解释：这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。
 

提示：

2 <= stones.length <= 2000
0 <= stones[i] <= 231 - 1
stones[0] == 0
通过次数18,882提交次数45,008

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/frog-jump
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <vector>
using namespace std;

bool canCross(vector<int>& stones) 
{
    int n = stones.size();
    // dp[i][k] 表示青蛙「跃过k个距离」是否「能跳到第i个单元格上的石头」
    vector<vector<bool>> dp(n, vector<bool>(n, false));
    for(int i = 1; i < n; i ++)
    {
        if(stones[i] - stones[i - 1] > i) // 要是相邻两单元格石头的距离都太大了，那肯定跳不到对岸
        {
            return false;
        }
    }
    dp[0][0] = true;
    for(int i = 1; i < n; i++)
    {
        for(int j = i - 1; j >= 0; j--) // 考察之前的所有石头
        {
            int k = stones[i] - stones[j];
            if(k > j + 1)
            {
                break;
            }
            dp[i][k] = dp[j][k - 1] || dp[j][k] || dp[j][k + 1]; // 转移方程
            if(i == n - 1 && dp[i][k]) // 最终的判断，只要有一块石头j能跳过来，就算true
            {
                return true;
            }
        }
        
    }
    return false;

}

// 感觉好像就是平平无奇的动态规划，但就是不会写