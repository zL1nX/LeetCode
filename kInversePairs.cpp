/*
给出两个整数 n 和 k，找出所有包含从 1 到 n 的数字，且恰好拥有 k 个逆序对的不同的数组的个数。

逆序对的定义如下：对于数组的第i个和第 j个元素，如果满i < j且 a[i] > a[j]，则其为一个逆序对；否则不是。

由于答案可能很大，只需要返回 答案 mod 109 + 7 的值。

示例 1:

输入: n = 3, k = 0
输出: 1
解释: 
只有数组 [1,2,3] 包含了从1到3的整数并且正好拥有 0 个逆序对。
示例 2:

输入: n = 3, k = 1
输出: 2
解释: 
数组 [1,3,2] 和 [2,1,3] 都有 1 个逆序对。
说明:

 n 的范围是 [1, 1000] 并且 k 的范围是 [0, 1000]。
通过次数5,948提交次数13,073

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/k-inverse-pairs-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <vector>
using namespace std;

const int mod = 1e9 + 7;

int kInversePairs(int n, int k) 
{
    vector<vector<int>> f(2, vector<int>(k + 1));
    f[0][0] = 1;
    for(int i = 1; i <= n; i ++) // 从1开始向一个空数组内逐个添加 
    {
        for(int j = 0; j <= k; j++)
        {
            int cur = i & 1, prev = cur ^ 1; // 这里因为就是从i-1转移到i，本质上就两个元素，因此使用cur（奇偶位）表示当前元素，prev（异或）自然就成为了上一个元素
            // 这是一种简化的写法，可以减少内存占用，并且这种把数组打平的方法真的挺巧
            f[cur][j] = (j - 1 >= 0 ? f[cur][j - 1] : 0) - (j - i >= 0 ? f[prev][j - i] : 0) + f[prev][j];
            // 转移方程的精简版，（其实就是两个式子相减），注意其中对边界的判断
            if(f[cur][j] >= mod)
            {
                f[cur][j] -= mod;
            }
            else if(f[cur][j] < 0)
            {
                f[cur][j] += mod;
            }
        }
    }
    return f[n & 1][k]; // 最后自然而然就是n&1对应的结果
}

// 牛的，首先就是要定义出这个dp代表啥含义，这里f[i][j]代表在添加第i个数时，有j个逆序对的数组个数    

// 而第i个数添加进去时，最多会新增i-1个逆序对，最少新增0个逆序对，那么从i-1状态转移到i时，就会出现从0到j-1来累加的转移方程

// 然而这么直接算会超时，因此可以将i-1对应的方程 和 i对应的方程展开相消，然后就能有一个很简单的式子

// 在写时要注意边界条件 以及 转移时负数的判断