/*
通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。

相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。

例如，clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。

另外，我们使用的除法是地板除法（floor division），所以 10 * 9 / 8 等于 11。这保证结果是一个整数。

实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。

 

示例 1：

输入：4
输出：7
解释：7 = 4 * 3 / 2 + 1
示例 2：

输入：10
输出：12
解释：12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
 

提示：

1 <= N <= 10000
-2^31 <= answer <= 2^31 - 1  （答案保证符合 32 位整数。）
通过次数6,340提交次数11,255

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/clumsy-factorial
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
#include <math.h>
using namespace std;

int clumsy(int N) 
{
    int res = 0, pre = 1;
    while(N >= 4)
    {
        res += floor(N * (N - 1) / (N - 2)) * pre + (N - 3);
        N -= 4;
        pre = -1;// 只有循环过才将系数变为-1
    }
    switch(N)
    {
        case 0: 
            break;
        case 1:
            res += pre;
            break;
        case 2:
            res += 2 * pre;
            break;
        case 3:
            res += 6 * pre;
            break;
        default:
            break;
    }
    return res;
}

// 好奇怪的一道题，刚开始以为要转成表达式然后求值

// 后来看了评论突然意识到确实可以4个一组直接计算

// 因此就是先4个4个算，同时注意中间的4个一组的系数为-1（因为是减法），然后看剩下的N多大

// 剩下的N无非就是0123，分别对应0 1 2 6直接加上即可，注意此处如果N小于等于4的话，系数并不是-1，因此计算时可用一pre变量控制系数