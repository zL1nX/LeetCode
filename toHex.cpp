/*
给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。

注意:

十六进制中所有字母(a-f)都必须是小写。
十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符'0'来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 
给定的数确保在32位有符号整数范围内。
不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。
示例 1：

输入:
26

输出:
"1a"
示例 2：

输入:
-1

输出:
"ffffffff"
通过次数28,831提交次数54,587

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
#include <string>

using namespace std;

string toHex(int num) 
{
    if(num == 0) return "0";
    string res = "";
    unsigned int number = (unsigned int)num;
    char bits[16] = {'0', '1', '2', '3', '4','5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    while(number)
    {
        res = bits[number % 16] + res;
        number /= 16;
    }
    return res;
}

// 个人觉得看似简单，但实际上暗藏玄机的一道题 

// 当num为正时肯定不用什么操作，就是最基础的进制转换，不过记得倒序的写法以及哈希表的运用

// 当num为负时就有意思了

// 此时有多种处理方法，可以将num加2的32次方，但本地测不通过（可能是符号位的原因）

// 因此一种比较稳健的方法是将原num转换为 unsigned int，这个转换的操作在C++中是定义好的

// 就是将负数加上MAX+1，即类似于取补的操作

// 之后就统一可以操作了

// 可以作为面试题，有多种写法，嗯写也能写出来，但这个num为负的处理情况感觉还挺看基础