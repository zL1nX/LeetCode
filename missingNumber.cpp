/*
给定一个包含 [0, n] 中 n 个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。

 

示例 1：

输入：nums = [3,0,1]
输出：2
解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
示例 2：

输入：nums = [0,1]
输出：2
解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
示例 3：

输入：nums = [9,6,4,2,3,5,7,0,1]
输出：8
解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。
示例 4：

输入：nums = [0]
输出：1
解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。
 

提示：

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
nums 中的所有数字都 独一无二
 

进阶：你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/missing-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <vector>
using namespace std;

int missingNumber(vector<int>& nums) 
{
    int n = nums.size(), res = 0; 
    for(int i = 0; i < n; i++)
    {
        res ^= i;
        res ^= nums[i];
    }
    res ^= n; // 因为循环体内是同时异或两个，但在该数组内，n这个序列号必然无法被遍历到
    // 因此最后再给元素异或上一个n，就实现了双双异或的目的
    return res;
}

// 这题还挺有意思的，因为数组是n个不同的元素，但理论上总共n + 1个元素，也就是总会有一个元素不在

// 如果线性空间内就要得到结果，只能想着用哈希表或者其他一些奇淫技巧

// 比如异或。想象下理想的n+1个元素的数组，和当前数组异或一下，是不是就剩下了那个缺着的元素（因为数组的元素互不相同）

// 而理想的n+1个元素的数组，不就是0到n的直接索引i么

// 所以就用一个变量来不断的异或，最后剩下的元素就是缺的了