/*
给你一个由若干 0 和 1 组成的字符串 s ，请你计算并返回将该字符串分割成两个 非空 子字符串（即 左 子字符串和 右 子字符串）所能获得的最大得分。

「分割字符串的得分」为 左 子字符串中 0 的数量加上 右 子字符串中 1 的数量。

 

示例 1：

输入：s = "011101"
输出：5 
解释：
将字符串 s 划分为两个非空子字符串的可行方案有：
左子字符串 = "0" 且 右子字符串 = "11101"，得分 = 1 + 4 = 5 
左子字符串 = "01" 且 右子字符串 = "1101"，得分 = 1 + 3 = 4 
左子字符串 = "011" 且 右子字符串 = "101"，得分 = 1 + 2 = 3 
左子字符串 = "0111" 且 右子字符串 = "01"，得分 = 1 + 1 = 2 
左子字符串 = "01110" 且 右子字符串 = "1"，得分 = 2 + 1 = 3
示例 2：

输入：s = "00111"
输出：5
解释：当 左子字符串 = "00" 且 右子字符串 = "111" 时，我们得到最大得分 = 2 + 3 = 5
示例 3：

输入：s = "1111"
输出：3
 

提示：

2 <= s.length <= 500
字符串 s 仅由字符 '0' 和 '1' 组成。
通过次数18,463提交次数33,064

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/maximum-score-after-splitting-a-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <string>
using namespace std;


int maxScore(string s) 
{
    int n = s.length(), one = 0;
    for(int i = 0; i < n; i++)
    {
        if(s[i] == '1') one ++; // 统计所有1的个数, 等价于整个右半部分的结果
    }
    int res = 0, score0 = 0, score1 = one;
    for(int i = 0; i < n - 1; i++) // 从左半部分开始遍历
    {
        if(s[i] == '0') score0++; // 左半部分的分数
        else score1--; // 因为左半部分遇到了1, 所以相应右半部分的score就会减小
        res = max(res, score0 + score1); 
    }
    return res;
}

// 有点tricky的一道题, 虽然暴力遍历是肯定可以的

// 但上面这种解法等价于, 先把右半部分的最大值算一下, 然后再从左半部分开始算起, 逐渐调整右半部分的score和左半部分的值

// 同时计算最大值, 这样就只用遍历两遍即可, 挺巧妙